package com.praca.manager.service;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.praca.manager.entity.Details;
import org.springframework.stereotype.Service;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Date;

@Service
public class PdfService {

    private CustomerService customerService;
    private DetailsService detailsService;

    public PdfService(CustomerService customerService, DetailsService detailsService){
        this.customerService = customerService;
        this.detailsService = detailsService;
    }

    private static Font titleFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    private static Font normalFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
    private static Font normalBoldFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

    public void newDocument(int customerId, int detailId) throws DocumentException, FileNotFoundException {
        Details details = detailsService.getDetails(detailId);
        details.setDelivered(true);
        detailsService.saveDetails(details);

        Document document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream("C:/Users/Lenovo/Desktop/new.pdf"));

        document.open();

        document.add(createTitleParagraph());

        document.add(createCustomerParagraph(customerId));

        document.add(createDetailParagraph(detailId));

        document.add(createSignatureParagraph());

        document.close();
    }

    public Paragraph createTitleParagraph(){

        Paragraph titleParagraph = new Paragraph();
        titleParagraph.add(new Paragraph("Service Card", titleFont));
        addEmptyLine(titleParagraph, 1);

        titleParagraph.add(new Paragraph("Report generated by: "
                + System.getProperty("user.name") + ", " + new Date(), normalBoldFont));
        addEmptyLine(titleParagraph, 1);

        return titleParagraph;
    }

    public Paragraph createCustomerParagraph(int customerId){

        Paragraph customerDataParagraph = new Paragraph("Customer Data", titleFont);
        addEmptyLine(customerDataParagraph, 1);

        customerDataParagraph.add(createCustomerTable(customerId));
        addEmptyLine(customerDataParagraph, 1);

        return customerDataParagraph;

    }

    public Paragraph createDetailParagraph(int detailId){
        Paragraph detailDataParagraph = new Paragraph("Details Data", titleFont);
        addEmptyLine(detailDataParagraph, 1);

        detailDataParagraph.add(createDetailTable(detailId));
        addEmptyLine(detailDataParagraph, 2);

        detailDataParagraph.add(new Paragraph("RECEIVED: \n", normalBoldFont));
        detailDataParagraph.add(new Paragraph(detailsService.getDetails(detailId).getReceived(), normalFont));
        addEmptyLine(detailDataParagraph, 1);

        detailDataParagraph.add(new Paragraph("FINISHED: \n", normalBoldFont));
        detailDataParagraph.add(new Paragraph(detailsService.getDetails(detailId).getReturned(),normalFont));
        addEmptyLine(detailDataParagraph, 2);

        detailDataParagraph.add(new Paragraph("SYMPTOMS: \n", normalBoldFont));
        detailDataParagraph.add(new Paragraph(detailsService.getDetails(detailId).getSymptoms(), normalFont));
        addEmptyLine(detailDataParagraph, 1);

        detailDataParagraph.add(new Paragraph("REPAIR DESCRIPTION: \n", normalBoldFont));
        detailDataParagraph.add(new Paragraph(detailsService.getDetails(detailId).getRepair(), normalFont));
        addEmptyLine(detailDataParagraph, 1);

        detailDataParagraph.add(new Paragraph("COMMENT: \n", normalBoldFont));
        detailDataParagraph.add(new Paragraph(detailsService.getDetails(detailId).getComments(), normalFont));
        addEmptyLine(detailDataParagraph, 5);

        return detailDataParagraph;
    }

    public Paragraph createSignatureParagraph(){

        Paragraph signatureParagraph = new Paragraph();
        Chunk customerSignature = new Chunk("customer signature");
        customerSignature.setUnderline(0.1f, -1f);
        Chunk whiteSpace = new Chunk("                                                                               ");
        Chunk serviceTechnicianSignature = new Chunk("service technician signature");
        serviceTechnicianSignature.setUnderline(0.1f, -1f);
        signatureParagraph.add(customerSignature);
        signatureParagraph.add(whiteSpace);
        signatureParagraph.add(serviceTechnicianSignature);

        return signatureParagraph;

    }

    public PdfPTable createCustomerTable(int customerId){

        PdfPTable table = new PdfPTable(4);

        PdfPCell c1 = new PdfPCell(new Phrase("Customer ID", normalBoldFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Owner", normalBoldFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Address", normalBoldFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("phone Number", normalBoldFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        PdfPCell data = new PdfPCell(new Phrase(String.valueOf(String.valueOf(customerService.getCustomer(customerId).getCustomerId()))));
        data.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(data);

        data = new PdfPCell(new Phrase(customerService.getCustomer(customerId).getOwner()));
        data.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(data);

        data = new PdfPCell(new Phrase(customerService.getCustomer(customerId).getAddress()));
        data.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(data);

        data = new PdfPCell(new Phrase(customerService.getCustomer(customerId).getPhoneNumber()));
        data.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(data);

        return table;
    }

    public PdfPTable createDetailTable(int detailId){

        PdfPTable table = new PdfPTable(5);

        PdfPCell cell = new PdfPCell(new Phrase("Manufacturer", normalBoldFont));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Pattern", normalBoldFont));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Number", normalBoldFont));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Power supply", normalBoldFont));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("battery", normalBoldFont));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(detailsService.getDetails(detailId).getManufacturer()));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(detailsService.getDetails(detailId).getManufacturerPattern()));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(detailsService.getDetails(detailId).getPatternNumber()));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase(detailsService.getDetails(detailId).getPowerSupply()));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        if (detailsService.getDetails(detailId).isBattery()){
            cell = new PdfPCell(new Phrase("yes"));
        }else {
            cell = new PdfPCell(new Phrase("no"));
        }
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        return table;
    }

    public void addEmptyLine(Paragraph paragraph, int count){
        for (int i=0; i<count; i++){
            paragraph.add(new Paragraph(" "));
        }
    }
}